//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace catalogoMobileAPI.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbCatalogoDigital : DbContext
    {
        public dbCatalogoDigital()
            : base("name=dbCatalogoDigital")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ecARTICULO> ecARTICULO { get; set; }
        public virtual DbSet<ecCARRITO> ecCARRITO { get; set; }
        public virtual DbSet<ecCATEGORIA> ecCATEGORIA { get; set; }
        public virtual DbSet<ecEMPRESA> ecEMPRESA { get; set; }
        public virtual DbSet<ecIMAGEN> ecIMAGEN { get; set; }
        public virtual DbSet<ecMARCA> ecMARCA { get; set; }
        public virtual DbSet<ecMENU> ecMENU { get; set; }
        public virtual DbSet<ecPEDIDO> ecPEDIDO { get; set; }
        public virtual DbSet<ecPERFIL> ecPERFIL { get; set; }
        public virtual DbSet<ecPERFILDET> ecPERFILDET { get; set; }
        public virtual DbSet<ecSUCURSAL> ecSUCURSAL { get; set; }
        public virtual DbSet<ecUNIDAD> ecUNIDAD { get; set; }
        public virtual DbSet<ecUSUARIO> ecUSUARIO { get; set; }
        public virtual DbSet<ecCOMENTARIO> ecCOMENTARIO { get; set; }
        public virtual DbSet<ecFAVORITO> ecFAVORITO { get; set; }
    
        public virtual ObjectResult<spArticulosListInicio_Result> spArticulosListInicio(Nullable<int> idEmpresa, string orden, string categoria, string marca, string buscar)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("idEmpresa", idEmpresa) :
                new ObjectParameter("idEmpresa", typeof(int));
    
            var ordenParameter = orden != null ?
                new ObjectParameter("orden", orden) :
                new ObjectParameter("orden", typeof(string));
    
            var categoriaParameter = categoria != null ?
                new ObjectParameter("categoria", categoria) :
                new ObjectParameter("categoria", typeof(string));
    
            var marcaParameter = marca != null ?
                new ObjectParameter("marca", marca) :
                new ObjectParameter("marca", typeof(string));
    
            var buscarParameter = buscar != null ?
                new ObjectParameter("buscar", buscar) :
                new ObjectParameter("buscar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spArticulosListInicio_Result>("spArticulosListInicio", idEmpresaParameter, ordenParameter, categoriaParameter, marcaParameter, buscarParameter);
        }
    
        public virtual ObjectResult<spEmpresaList_Result> spEmpresaList(Nullable<int> idEmpresa, string orden, string buscar)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("idEmpresa", idEmpresa) :
                new ObjectParameter("idEmpresa", typeof(int));
    
            var ordenParameter = orden != null ?
                new ObjectParameter("orden", orden) :
                new ObjectParameter("orden", typeof(string));
    
            var buscarParameter = buscar != null ?
                new ObjectParameter("buscar", buscar) :
                new ObjectParameter("buscar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmpresaList_Result>("spEmpresaList", idEmpresaParameter, ordenParameter, buscarParameter);
        }
    }
}
